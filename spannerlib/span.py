# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/005_spans_and_pandas.ipynb.

# %% auto 0
__all__ = ['Span', 'SpanDtype']

# %% ../nbs/005_spans_and_pandas.ipynb 3
from abc import ABC, abstractmethod
import pytest

import pandas as pd
from pathlib import Path
from typing import no_type_check, Set, Sequence, Any,Optional,List,Callable,Dict,Union
from pydantic import BaseModel


# %% ../nbs/005_spans_and_pandas.ipynb 5
from enum import Enum
from typing import Any
from pydantic import ConfigDict

class Span():
    def __init__(self,start,end):
        self.start = start
        self.end = end

    def __lt__(self, other) -> bool:
        if self.start == other.start:
            return self.end < other.end

        return self.start < other.start

    @classmethod
    def from_val(cls,val):
        if isinstance(val,Span):
            return val
        if isinstance(val, (list, tuple)) and len(val) == 2:
            return Span(start=val[0], end=val[1])
        raise ValueError('Invalid value to create Vector from: {}'.format(val))
    
    def as_tuple(self):
        return (self.start, self.end)

    def __str__(self):
        return f"Span({self.start},{self.end})"

    def __repr__(self):
        return str(self)

    # # used for sorting `Span`s in dataframes
    # def __hash__(self) -> int:
    #     return hash((self.start, self.end))

# %% ../nbs/005_spans_and_pandas.ipynb 6
import numpy as np
from pandas.core.dtypes.dtypes import PandasExtensionDtype
from pandas.api.extensions import ExtensionArray, ExtensionScalarOpsMixin, register_extension_dtype

@register_extension_dtype
class SpanDtype(PandasExtensionDtype):
    """
    Class to describe the custom Vector data type
    """
    type = Span       # Scalar type for data
    name = 'span'     # String identifying the data type name 

    @classmethod
    def construct_array_type(cls):
        """
        Return array type associated with this dtype
        """
        return SpanArray

    def __str__(self):
        return self.name
